// <auto-generated />
using System;
using BloodDonationSystem.DAL.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationSystem.DAL.Migrations
{
    [DbContext(typeof(BloodDonationPrn222Context))]
    [Migration("20250713125252_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Entities.BloodStored", b =>
                {
                    b.Property<Guid>("StoredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StoredId")
                        .HasName("PK__BloodSto__A98AEA7D25309813");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("BloodStored", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.BloodType", b =>
                {
                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BloodTypeId")
                        .HasName("PK__BloodTyp__B489BA630F3E6DE1");

                    b.HasIndex(new[] { "Name" }, "UQ_BloodTypes_Name")
                        .IsUnique();

                    b.ToTable("BloodTypes");
                });

            modelBuilder.Entity("BusinessObject.Entities.DonationRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountBlood")
                        .HasColumnType("int");

                    b.Property<Guid>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("RequestTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId")
                        .HasName("PK__Donation__33A8517AA5458CF1");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationRequests");
                });

            modelBuilder.Entity("BusinessObject.Entities.DonationsHistory", b =>
                {
                    b.Property<Guid>("DonationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConfirmedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Completed");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DonationId")
                        .HasName("PK__Donation__C5082EFB21BC77A8");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationsHistory", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.DonorInformation", b =>
                {
                    b.Property<Guid>("DonorInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTimeOffset>("LastChecked")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MedicalStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DonorInfoId")
                        .HasName("PK__DonorInf__DE4F057B17CD15BE");

                    b.HasIndex(new[] { "UserId" }, "UQ_DonorInformation_UserId")
                        .IsUnique();

                    b.ToTable("DonorInformation", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDonor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastDonationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CA6BE1634");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObject.Entities.BloodStored", b =>
                {
                    b.HasOne("BusinessObject.Entities.BloodType", "BloodType")
                        .WithMany("BloodStoreds")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BloodStored_BloodTypes");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("BusinessObject.Entities.DonationRequest", b =>
                {
                    b.HasOne("BusinessObject.Entities.BloodType", "BloodType")
                        .WithMany("DonationRequests")
                        .HasForeignKey("BloodTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DonationRequests_BloodTypes");

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("DonationRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DonationRequests_Users");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.DonationsHistory", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "ConfirmedByNavigation")
                        .WithMany("DonationsHistoryConfirmedByNavigations")
                        .HasForeignKey("ConfirmedBy")
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.DonationRequest", "Request")
                        .WithMany("DonationsHistories")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_DonationsHistory_DonationRequests");

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("DonationsHistoryUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ConfirmedByNavigation");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.DonorInformation", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithOne("DonorInformation")
                        .HasForeignKey("BusinessObject.Entities.DonorInformation", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DonorInformation_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.BloodType", b =>
                {
                    b.Navigation("BloodStoreds");

                    b.Navigation("DonationRequests");
                });

            modelBuilder.Entity("BusinessObject.Entities.DonationRequest", b =>
                {
                    b.Navigation("DonationsHistories");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Navigation("DonationRequests");

                    b.Navigation("DonationsHistoryConfirmedByNavigations");

                    b.Navigation("DonationsHistoryUsers");

                    b.Navigation("DonorInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
